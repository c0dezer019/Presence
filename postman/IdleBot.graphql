schema {
    query: Query
    mutation: Mutation
}

scalar Snowflake
scalar DateTime
scalar Dict
scalar Set

interface User {
    member_id: Snowflake!
    username: String!
    discriminator: Int!
    admin_access: Boolean
    status: String
    date_added: DateTime
    flags: [String!]
}

type Member implements User {
    member_id: Snowflake!
    username: String!
    discriminator: Int!
    nickname: String
    admin_access: Boolean
    last_activity: String
    last_active_server: Snowflake
    last_active_channel: Snowflake
    last_active_ts: DateTime
    idle_times: [Int!]
    average_idle_time: Int
    recent_averages: [Int!]
    flags: [String!]
    status: String
    date_added: DateTime
}

type MemberResult {
    code: Int!
    errors: [String!]
    member: Member
}

type MembersResult {
    code: Int!
    errors: [String!]
    members: Set
}

interface Server {
    guild_id: Snowflake!
    name: String!
    status: String
    settings: Dict
    date_added: DateTime
}

type Guild implements Server {
    guild_id: Snowflake!
    name: String!
    last_activity: String
    last_active_channel: Snowflake
    last_active_ts: String
    idle_times: [Int!]
    average_idle_time: Int
    recent_averages: [Int!]
    status: String
    settings: Dict
    members: Set
    date_added: DateTime
}

type GuildResult {
    code: Int!
    errors: [String!]
    guild: Guild
}

type GuildsResult {
    code: Int!
    errors: [String!]
    guilds: Set
}

type Query {
    members: MembersResult!
    member(member_id: Snowflake!): MemberResult
    guilds: GuildsResult!
    guild(guild_id: Snowflake!): GuildResult
}

type DeleteResult {
    code: Int!
    errors: [String!]
}

input GuildCreate {
    guild_id: Snowflake!
    name: String!
}

input GuildUpdate {
    name: String
    last_activity: String
    last_active_channel: Snowflake
    last_active_ts: DateTime
    idle_times: [Int!]
    average_idle_time: Int
    recent_averages: [Int!]
    status: String
    settings: Dict
    members: Set
}

input MemberCreate {
    member_id: Snowflake!
    username: String!
    discriminator: Int!
    nickname: String
    flags: [String!]
}

input MemberUpdate {
    member_id: Snowflake!,
    nickname: String,
    username: String,
    discriminator: Int,
    admin_access: Boolean,
    last_activity: String,
    last_active_server: Snowflake,
    last_active_channel: Snowflake,
    last_active_ts: DateTime,
    idle_times: List,
    average_idle_time: Int,
    recent_averages: List,
    flags: [String!],
    status: String
}

type Mutation {
    createMember(input: MemberCreate!): MemberResult!
    updateMember(member_id: Snowflake!, input: MemberUpdate!): MemberResult!
    createGuild(input: GuildCreate!): GuildResult!
    updateGuild(guild_id: Snowflake!, input: GuildUpdate!): GuildResult!
    deleteGuild(guild_id: Snowflake!): DeleteResult!
    deleteMember(member_id: Snowflake!): DeleteResult!
}
